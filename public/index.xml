<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Just Another Geek</title>
    <link>https://justanothergeek.chdir.org/</link>
    <description>Recent content on Just Another Geek</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 29 Dec 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://justanothergeek.chdir.org/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>What has inspired me in 2019?</title>
      <link>https://justanothergeek.chdir.org/2019/12/What-has-inspired-me-in-2019/</link>
      <pubDate>Sun, 29 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://justanothergeek.chdir.org/2019/12/What-has-inspired-me-in-2019/</guid>
      <description>Last blog post was 8 years ago, time flies and shame on me!
A lot of things happened since 2012, among others, I took the opportunity to co-found an incident response team and the least we can say is that blue team work is not as bankable as offensive practices (that could clearly be a subject of a post) even thu the job is ü§©.
Nevertheless, while retrospecting on 2019, I wanted to re-open this blog by giving back to those who had inspired me this year.</description>
    </item>
    
    <item>
      <title>Engineering Yara rules</title>
      <link>https://justanothergeek.chdir.org/2019/01/Engineering-Yara-rules/</link>
      <pubDate>Sun, 06 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://justanothergeek.chdir.org/2019/01/Engineering-Yara-rules/</guid>
      <description>The problem Unless you are an anti-virus vendor, @Neo23x0 or a passionated one-man shop malware researcher, the management of Yara rules quickly become messy in a team environment as everything becomes eventually inconsistent:
 rule naming: MyBigCorp_Emotet, Emotet, Emotet_20, or Incident_SANDWICH? use of tags: Should it be the malware family or a higher-level classification (RAT, Ransomware)? use of namespaces &amp;ldquo;coding style&amp;ldquo;: where should go the curly braces? Tab or spaces?</description>
    </item>
    
    <item>
      <title>Linux security in 2011, or my LKML&#39;s yearly digest</title>
      <link>https://justanothergeek.chdir.org/2012/01/Linux-security-in-2011-or-my-LKMLs-yearly-digest/</link>
      <pubDate>Tue, 24 Jan 2012 16:16:00 +0000</pubDate>
      
      <guid>https://justanothergeek.chdir.org/2012/01/Linux-security-in-2011-or-my-LKMLs-yearly-digest/</guid>
      <description>Linux security in 2011, or LKML&amp;rsquo;s yearly digest Disclaimer: I have nothing to do with the following, all credits go to their respective authors. I&amp;rsquo;m just publishing my 2011&amp;rsquo;s bookmarks about Linux kernel security with a one line summary based on my (possibly wrong) understanding
Do not hesitate to correct me (gently if possible :)) in comments or mail.
 False boundaries of (certain) capabilities: Brad Spengler describes 19 capabilities (of 35) which can be used to regain full privileges.</description>
    </item>
    
    <item>
      <title>ld-linux.so ELF hooker</title>
      <link>https://justanothergeek.chdir.org/2011/11/ld-linux.so-ELF-hooker/</link>
      <pubDate>Wed, 02 Nov 2011 16:30:00 +0000</pubDate>
      
      <guid>https://justanothergeek.chdir.org/2011/11/ld-linux.so-ELF-hooker/</guid>
      <description>**TL;DR**\ [St√©phane](https://plus.google.com/108914619478390609767) and [myself](https://plus.google.com/114289168433047035840)¬†are releasing ag new tool injecting code at runtime, just between the ELF loader and target binary. It is an alternative to `LD_PRELOAD`, just a little bit more intrusive but 100% reliable :)\ [Sources were released on Github](https://github.com/sduverger/ld-shatner)  

When a binary is execve(), the kernel extracts from the ELF headers the interpreter to be launched, usually /lib/ld-linux.so.2.¬†The kernel creates a new process and prepares the environment (arguments and auxiliary data).</description>
    </item>
    
    <item>
      <title>Introducing a bit of Web paranoia into my habits...</title>
      <link>https://justanothergeek.chdir.org/2011/09/Introducing-a-bit-of-Web-paranoia-into-my-habits.../</link>
      <pubDate>Sun, 25 Sep 2011 20:07:00 +0000</pubDate>
      
      <guid>https://justanothergeek.chdir.org/2011/09/Introducing-a-bit-of-Web-paranoia-into-my-habits.../</guid>
      <description>When I&amp;rsquo;m not slacking in Emacs, I now spend most of my time in Google Chrome. Almost everything I do is in the &amp;ldquo;cloud&amp;rdquo; (I hate this buzz word): mail, blog, chats, voip and even version control.
With the explosion of &amp;ldquo;social buttons&amp;rdquo; everywhere, I became really more paranoid than before about my privacy. And when I see¬†new Facebook &amp;lsquo;Frictionless sharing&amp;rsquo;¬†feature, I don&amp;rsquo;t regret my move. What did I do?</description>
    </item>
    
    <item>
      <title>net2pcap revival</title>
      <link>https://justanothergeek.chdir.org/2011/08/net2pcap-revival/</link>
      <pubDate>Sat, 27 Aug 2011 14:54:00 +0000</pubDate>
      
      <guid>https://justanothergeek.chdir.org/2011/08/net2pcap-revival/</guid>
      <description>net2pcap is a packet capture tool written by Philippe Biondi¬†back in 2003. It was designed to be as secure as possible in order to be run in hostile environment. To do so, its code is minimalist without any complicate feature, the result is 406 lines of simple C. On top of its security, it is also the most reliable tool I have ever used on high traffic link regarding packet loss, even dumpcap does not perform better.</description>
    </item>
    
    <item>
      <title>HOWTO authenticate ssh server through certificates</title>
      <link>https://justanothergeek.chdir.org/2011/07/HOWTO-authenticate-ssh-server-through-certificates/</link>
      <pubDate>Wed, 06 Jul 2011 14:34:00 +0000</pubDate>
      
      <guid>https://justanothergeek.chdir.org/2011/07/HOWTO-authenticate-ssh-server-through-certificates/</guid>
      <description>In August 2010, OpenSSH 5.6 added support for certificate authentication (release notes), unfortunately, no documentation really exists at the moment (you are on your own with sshd_config(1),¬†ssh-keygen(1)¬†and¬†ssh_config(1), good luck with that). This is a surprising because this feature is awesome for system administrators, even for a small deployment.
Certificates allow you to sign user or host keys. In other words:
- Thanks to a unique file (CA certificate) on the server, it can accept any (signed) user keys transparently - If every servers&amp;rsquo; host keys are signed, clients only need to carry the CA to authenticate every servers of your network, which means no more &amp;ldquo;The authenticity of host foobar can&amp;rsquo;t be established.</description>
    </item>
    
    <item>
      <title>no-release of seccomp-nurse</title>
      <link>https://justanothergeek.chdir.org/2011/04/no-release-of-seccomp-nurse/</link>
      <pubDate>Mon, 11 Apr 2011 11:37:00 +0000</pubDate>
      
      <guid>https://justanothergeek.chdir.org/2011/04/no-release-of-seccomp-nurse/</guid>
      <description>**This post in a nutshell**\ This was a draft since [my presentation at Ekoparty](http://chdir.org/~nico/papers/seccomp-nurse10/), I will force myself to not procrastinate this time. **This post announces the no-release of seccomp-nurse** (it is not a release because it is still an advanced proof of concept). Quick links: - [seccomp-nurse homepage](http://chdir.org/~nico/seccomp-nurse/) - [seccomp-nurse sources](http://github.com/nbareil/seccomp-nurse/) - [screencast: sandboxing the python interpreter](http://www.youtube.com/watch?v=EUSxAJE9xqI)  
seccomp-nurse is a generic sandbox environnement for Linux, which doesn&amp;rsquo;t require any recompilation.</description>
    </item>
    
    <item>
      <title>Linux Security, one year later...</title>
      <link>https://justanothergeek.chdir.org/2011/01/Linux-Security-one-year-later.../</link>
      <pubDate>Mon, 03 Jan 2011 22:48:00 +0000</pubDate>
      
      <guid>https://justanothergeek.chdir.org/2011/01/Linux-Security-one-year-later.../</guid>
      <description>This post (tries to) describe what happened in 2010 about GNU/Linux security. What this post is not is a long list of vulnerabilities, there are some people doing it way better that me.
The first part of this post is dedicated to new vulnerability classes where the second one focuses on the defensive side, analyzing improvements made to the Linux kernel. Before closing this post, some selected quotes will be presented, pointing the finger at some of the Linux failures.</description>
    </item>
    
    <item>
      <title>La s√©curit√© sous Linux, un an plus tard...</title>
      <link>https://justanothergeek.chdir.org/2010/12/La-s%C3%A9curit%C3%A9-sous-Linux-un-an-plus-tard.../</link>
      <pubDate>Tue, 28 Dec 2010 15:43:00 +0000</pubDate>
      
      <guid>https://justanothergeek.chdir.org/2010/12/La-s%C3%A9curit%C3%A9-sous-Linux-un-an-plus-tard.../</guid>
      <description>Sorry english folks: this post is in french, but it will be translated soon, translated and updated post is available here.
Plus qu&amp;rsquo;une longue liste de vuln√©rabilit√©s, ce post a pour objectif de d√©crire ce qu&amp;rsquo;il s&amp;rsquo;est pass√© en 2010 dans l&amp;rsquo;√©cosyst√®me de la s√©curit√© sous GNU/Linux.
La premi√®re partie est d√©di√©e aux nouvelles classes de vuln√©rabilit√©.¬†La deuxi√®me partie se concentre sur la d√©fense avec l&amp;rsquo;analyse des diff√©rentes am√©liorations tendant √† am√©liorer la s√©curit√© de nos syst√®mes.</description>
    </item>
    
    <item>
      <title>What is really the attack surface of the kernel running a SECCOMP process?</title>
      <link>https://justanothergeek.chdir.org/2010/08/What-is-really-the-attack-surface-of-the-kernel-running-a-SECCOMP-process/</link>
      <pubDate>Wed, 25 Aug 2010 14:09:00 +0000</pubDate>
      
      <guid>https://justanothergeek.chdir.org/2010/08/What-is-really-the-attack-surface-of-the-kernel-running-a-SECCOMP-process/</guid>
      <description>In a previous post, I said the attack surface of the kernel for processes running SECCOMP was really low. To confirm this assumption, each vulnerability affecting the 2.6 kernel was reviewed.
Only those triggerable from a SECCOMPed process were kept. On 440 vulnerabilities, 13 were qualified:
Impact Description Architecture Reference
HIGH infinite loop triggering signal handler i386 CVE-2004-0554 MEDIUM audit_syscall_entry bypass amd64 CVE-2009-0834 MEDIUM SECCOMP bypass amd64 CVE-2009-0835 MEDIUM Non-sign extension of syscall arguments s390 CVE-2009-0029 MEDIUM EFLAGS leak on context switch amd64/i386 CVE-2006-5755 MEDIUM Nested faults amd64 CVE-2005-1767 MEDIUM Not handling properly certain privileged instructions s390 CVE-2004-0887 LOW Fix register leak in 32 bits syscall audititing amd64 81766741f LOW 64-bit kernel register leak to 32-bit processes amd64 24e35800c LOW Register leak amd64 CVE-2009-2910 LOW DoS by using malformed LDT amd64 CVE-2008-3247 LOW DoS on floating point exceptions powerpc HTX CVE-2007-3107 LOW DoS on 32-bit compatibility mode amd64 CVE-2005-1765</description>
    </item>
    
    <item>
      <title>Massive reverse address DNS resolver</title>
      <link>https://justanothergeek.chdir.org/2010/05/Massive-reverse-address-DNS-resolver/</link>
      <pubDate>Sat, 15 May 2010 09:26:00 +0000</pubDate>
      
      <guid>https://justanothergeek.chdir.org/2010/05/Massive-reverse-address-DNS-resolver/</guid>
      <description>Just for the record (and newsoft :), here is a basic reverse DNS bruteforce implemented with Node.js: thanks to this awesome event-based library, it is possible to write powerful tools in a few Javascript lines!
The following code will resolve a /24 netblock in less than 5 seconds.
#! /usr/bin/nodejs var baseaddr = &#39;88.191.98.&#39;; var sys = require(&#39;sys&#39;); var dns = require(&#39;dns&#39;); var events = require(&#39;events&#39;); function reverse_addr(addr) { var e = new events.</description>
    </item>
    
    <item>
      <title>Document review of Qubes OS</title>
      <link>https://justanothergeek.chdir.org/2010/04/Document-review-of-Qubes-OS/</link>
      <pubDate>Thu, 08 Apr 2010 15:03:00 +0000</pubDate>
      
      <guid>https://justanothergeek.chdir.org/2010/04/Document-review-of-Qubes-OS/</guid>
      <description>Qubes OS You must have heard about it, Invisible Things Lab released their own operating system, named Qubes OS (If you ask me, I would have refer to it as a Linux distribution instead). Their distribution focuses on security isolation and is based on their virtualization experience (for the record, Joanna and Rafal are the people behind most of the virtualization vulnerabilities found in the previous years).
 Disclaimer: I do not had the occasion to test the system, this post is only based on my reading of their (great) QubesOs architecture paper (version 0.</description>
    </item>
    
    <item>
      <title>CVE-2010-0740: Record of death vulnerability in OpenSSL</title>
      <link>https://justanothergeek.chdir.org/2010/03/CVE-2010-0740-Record-of-death-vulnerability-in-OpenSSL/</link>
      <pubDate>Thu, 25 Mar 2010 11:22:00 +0000</pubDate>
      
      <guid>https://justanothergeek.chdir.org/2010/03/CVE-2010-0740-Record-of-death-vulnerability-in-OpenSSL/</guid>
      <description>A new vulnerability (CVE-2010-0740) was found in OpenSSL, affectionately called &amp;ldquo;Record of death&amp;rdquo; (in reference to the ping of death vulnerability back in 1996) was fixed by the patch below:
--- ssl/s3_pkt.c 24 Jan 2010 13:52:38 -0000 1.57.2.9 +++ ssl/s3_pkt.c 24 Mar 2010 00:00:00 -0000 @@ -291,9 +291,9 @@ if (version != s-&amp;gt;version) { SSLerr(SSL_F_SSL3_GET_RECORD,SSL_R_WRONG_VERSION_NUMBER); - /* Send back error using their - * version number :-) */ - s-&amp;gt;version=version; + if ((s-&amp;gt;version &amp;amp; 0xFF00) == (version &amp;amp; 0xFF00)) + /* Send back error using their minor version number :-) */ + s-&amp;gt;version = (unsigned short)version; al=SSL_AD_PROTOCOL_VERSION; goto f_err; }  Arno and myself had a look on this vuln, but at a glance, it&amp;rsquo;s hard to understand the consequences of theses two modifications:</description>
    </item>
    
    <item>
      <title>GSM 7 bits encoding</title>
      <link>https://justanothergeek.chdir.org/2010/03/GSM-7-bits-encoding/</link>
      <pubDate>Sat, 13 Mar 2010 11:14:00 +0000</pubDate>
      
      <guid>https://justanothergeek.chdir.org/2010/03/GSM-7-bits-encoding/</guid>
      <description>I implemented some GSM protocol parts in scapy so I had to implement the infamous &amp;ldquo;7 bits alphabet&amp;rdquo;.
This is used for SMS encoding for example, the principle is simple: each character is coded on 7 bits, which means that inside one byte, there are two (parts of) characters.
My google-fu was not sufficient to find a readable implementation so I gave it a try:
def decode_gsm7bits(x): shift=0 remain=0 s=&#39;&#39; if not x: return s for byte in x: i = (ord(byte) &amp;lt;&amp;lt; shift) | remain remain = (i &amp;gt;&amp;gt; 7) i = i &amp;amp; 0x7f s+=chr(i) shift = (shift+1)%7 if shift == 0: s+=chr(remain) remain=0 if s[-1] == &#39;\x00&#39;: # padding issue s=s[:-1] return s def encode_gsm7bits(x): shift=0 remain=0 srclen = len(x) i=0 stream=&#39;&#39; mask=0 while i &amp;lt; srclen: if i+1 == srclen: next = 0 else: next = ord(x[i+1]) &amp;lt;&amp;lt; (7-shift) cur = (ord(x[i]) &amp;gt;&amp;gt; shift) | next stream += chr(cur &amp;amp; 0xff) i+=1 shift = (shift+1)%7 if shift == 0: mask=0 i+=1 return stream  As far as I can tell, it works like a charm: I successfully manage to send raw messages to mobiles :)</description>
    </item>
    
    <item>
      <title>SECCOMP as a Sandboxing solution ?</title>
      <link>https://justanothergeek.chdir.org/2010/03/SECCOMP-as-a-Sandboxing-solution/</link>
      <pubDate>Thu, 04 Mar 2010 14:10:00 +0000</pubDate>
      
      <guid>https://justanothergeek.chdir.org/2010/03/SECCOMP-as-a-Sandboxing-solution/</guid>
      <description>Sandboxing technology? SECCOMP is a Linux feature introduced in 2.6.23 (2005) by Andrea Arcangeli, initially designed for grid computing applications. The idea was to sell CPU times to the public by running untrusted binaries.
When a process goes into SECCOMP mode, it can only do 4 syscalls: read, write, _exit and sigreturn. The kernel will enforce this limitation by killing (by a SIGKILL signal) the process if an unauthorized system call is made.</description>
    </item>
    
    <item>
      <title>No more ASLR bypass on Linux 2.6.30</title>
      <link>https://justanothergeek.chdir.org/2010/02/No-more-ASLR-bypass-on-Linux-2.6.30/</link>
      <pubDate>Tue, 23 Feb 2010 12:26:00 +0000</pubDate>
      
      <guid>https://justanothergeek.chdir.org/2010/02/No-more-ASLR-bypass-on-Linux-2.6.30/</guid>
      <description>While trying to exploit a local setuid application, I had the unhappiness (as an attacker) to see that the security of the ASLR Linux kernel has increased, removing a whole method of exploitation. But let&amp;rsquo;s begin from the start:
The minimalist vulnerable example could be this vuln.c:
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; int main( int argc, char *argv[] ) { char buf[4]; printf(&amp;quot;%#p\n&amp;quot;, &amp;amp;buf); strcpy( buf, argv[1] ); return 0; }  Because of the Address Space Layout Randomization (ASLR), this bug is tough to exploit: if the binary is compiled with the right options and the kernel is configured to fully randomize the address space, it becomes impossible to guess where the buffer is, nor the location of the functions&amp;rsquo; libraries.</description>
    </item>
    
    <item>
      <title>How system calls work on recent Linux x86 glibc</title>
      <link>https://justanothergeek.chdir.org/2010/02/How-system-calls-work-on-recent-Linux-x86-glibc/</link>
      <pubDate>Sat, 20 Feb 2010 22:11:00 +0000</pubDate>
      
      <guid>https://justanothergeek.chdir.org/2010/02/How-system-calls-work-on-recent-Linux-x86-glibc/</guid>
      <description>This post explains how system calls are implemented on recent Linux system. It covers only the x86_32 platform, on a recent Linux kernel and GNU Libc (where recent means &amp;ldquo;released after 2005&amp;rdquo;).
Processor facility for making syscall On x86, userspace processes run in ring 3, while the kernel is in ring 0. Only the kernel can do the interface between the resources and the processes.
A resource can be an access to a hardware device, a kernel object or any kind of IPC.</description>
    </item>
    
    <item>
      <title>New blog, new rules</title>
      <link>https://justanothergeek.chdir.org/2010/02/New-blog-new-rules/</link>
      <pubDate>Sat, 20 Feb 2010 21:18:00 +0000</pubDate>
      
      <guid>https://justanothergeek.chdir.org/2010/02/New-blog-new-rules/</guid>
      <description>Sometimes, I receive emails asking me to translate my papers or blog posts in English; each time, I procrastinate and never do it. My year&amp;rsquo;s resolution is to address this issue, that&amp;rsquo;s why this blog goes english now.
Off course, I will not translate previous posts because it would be so time-consumming that even just identify which post is interesting enough to be translated would be too long.
That&amp;rsquo;s why I will keep available my previous posts at this address: http://chdir.</description>
    </item>
    
  </channel>
</rss>