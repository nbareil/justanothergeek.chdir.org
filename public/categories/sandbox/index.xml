<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sandbox on Just Another Geek</title>
    <link>https://justanothergeek.chdir.org/categories/sandbox/</link>
    <description>Recent content in Sandbox on Just Another Geek</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 02 Nov 2011 16:30:00 +0000</lastBuildDate>
    
	<atom:link href="https://justanothergeek.chdir.org/categories/sandbox/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ld-linux.so ELF hooker</title>
      <link>https://justanothergeek.chdir.org/2011/11/ld-linux.so-ELF-hooker/</link>
      <pubDate>Wed, 02 Nov 2011 16:30:00 +0000</pubDate>
      
      <guid>https://justanothergeek.chdir.org/2011/11/ld-linux.so-ELF-hooker/</guid>
      <description>**TL;DR**\ [Stéphane](https://plus.google.com/108914619478390609767) and [myself](https://plus.google.com/114289168433047035840) are releasing ag new tool injecting code at runtime, just between the ELF loader and target binary. It is an alternative to `LD_PRELOAD`, just a little bit more intrusive but 100% reliable :)\ [Sources were released on Github](https://github.com/sduverger/ld-shatner)  

When a binary is execve(), the kernel extracts from the ELF headers the interpreter to be launched, usually /lib/ld-linux.so.2. The kernel creates a new process and prepares the environment (arguments and auxiliary data).</description>
    </item>
    
    <item>
      <title>no-release of seccomp-nurse</title>
      <link>https://justanothergeek.chdir.org/2011/04/no-release-of-seccomp-nurse/</link>
      <pubDate>Mon, 11 Apr 2011 11:37:00 +0000</pubDate>
      
      <guid>https://justanothergeek.chdir.org/2011/04/no-release-of-seccomp-nurse/</guid>
      <description>**This post in a nutshell**\ This was a draft since [my presentation at Ekoparty](http://chdir.org/~nico/papers/seccomp-nurse10/), I will force myself to not procrastinate this time. **This post announces the no-release of seccomp-nurse** (it is not a release because it is still an advanced proof of concept). Quick links: - [seccomp-nurse homepage](http://chdir.org/~nico/seccomp-nurse/) - [seccomp-nurse sources](http://github.com/nbareil/seccomp-nurse/) - [screencast: sandboxing the python interpreter](http://www.youtube.com/watch?v=EUSxAJE9xqI)  
seccomp-nurse is a generic sandbox environnement for Linux, which doesn&amp;rsquo;t require any recompilation.</description>
    </item>
    
    <item>
      <title>What is really the attack surface of the kernel running a SECCOMP process?</title>
      <link>https://justanothergeek.chdir.org/2010/08/What-is-really-the-attack-surface-of-the-kernel-running-a-SECCOMP-process/</link>
      <pubDate>Wed, 25 Aug 2010 14:09:00 +0000</pubDate>
      
      <guid>https://justanothergeek.chdir.org/2010/08/What-is-really-the-attack-surface-of-the-kernel-running-a-SECCOMP-process/</guid>
      <description>In a previous post, I said the attack surface of the kernel for processes running SECCOMP was really low. To confirm this assumption, each vulnerability affecting the 2.6 kernel was reviewed.
Only those triggerable from a SECCOMPed process were kept. On 440 vulnerabilities, 13 were qualified:
Impact Description Architecture Reference
HIGH infinite loop triggering signal handler i386 CVE-2004-0554 MEDIUM audit_syscall_entry bypass amd64 CVE-2009-0834 MEDIUM SECCOMP bypass amd64 CVE-2009-0835 MEDIUM Non-sign extension of syscall arguments s390 CVE-2009-0029 MEDIUM EFLAGS leak on context switch amd64/i386 CVE-2006-5755 MEDIUM Nested faults amd64 CVE-2005-1767 MEDIUM Not handling properly certain privileged instructions s390 CVE-2004-0887 LOW Fix register leak in 32 bits syscall audititing amd64 81766741f LOW 64-bit kernel register leak to 32-bit processes amd64 24e35800c LOW Register leak amd64 CVE-2009-2910 LOW DoS by using malformed LDT amd64 CVE-2008-3247 LOW DoS on floating point exceptions powerpc HTX CVE-2007-3107 LOW DoS on 32-bit compatibility mode amd64 CVE-2005-1765</description>
    </item>
    
    <item>
      <title>Document review of Qubes OS</title>
      <link>https://justanothergeek.chdir.org/2010/04/Document-review-of-Qubes-OS/</link>
      <pubDate>Thu, 08 Apr 2010 15:03:00 +0000</pubDate>
      
      <guid>https://justanothergeek.chdir.org/2010/04/Document-review-of-Qubes-OS/</guid>
      <description>Qubes OS You must have heard about it, Invisible Things Lab released their own operating system, named Qubes OS (If you ask me, I would have refer to it as a Linux distribution instead). Their distribution focuses on security isolation and is based on their virtualization experience (for the record, Joanna and Rafal are the people behind most of the virtualization vulnerabilities found in the previous years).
 Disclaimer: I do not had the occasion to test the system, this post is only based on my reading of their (great) QubesOs architecture paper (version 0.</description>
    </item>
    
    <item>
      <title>SECCOMP as a Sandboxing solution ?</title>
      <link>https://justanothergeek.chdir.org/2010/03/SECCOMP-as-a-Sandboxing-solution/</link>
      <pubDate>Thu, 04 Mar 2010 14:10:00 +0000</pubDate>
      
      <guid>https://justanothergeek.chdir.org/2010/03/SECCOMP-as-a-Sandboxing-solution/</guid>
      <description>Sandboxing technology? SECCOMP is a Linux feature introduced in 2.6.23 (2005) by Andrea Arcangeli, initially designed for grid computing applications. The idea was to sell CPU times to the public by running untrusted binaries.
When a process goes into SECCOMP mode, it can only do 4 syscalls: read, write, _exit and sigreturn. The kernel will enforce this limitation by killing (by a SIGKILL signal) the process if an unauthorized system call is made.</description>
    </item>
    
  </channel>
</rss>