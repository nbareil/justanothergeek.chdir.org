<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kernel on Just Another Geek</title>
    <link>https://justanothergeek.chdir.org/categories/kernel/</link>
    <description>Recent content in Kernel on Just Another Geek</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 03 Jan 2011 22:48:00 +0000</lastBuildDate>
    
	<atom:link href="https://justanothergeek.chdir.org/categories/kernel/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Linux Security, one year later...</title>
      <link>https://justanothergeek.chdir.org/2011/01/Linux-Security-one-year-later.../</link>
      <pubDate>Mon, 03 Jan 2011 22:48:00 +0000</pubDate>
      
      <guid>https://justanothergeek.chdir.org/2011/01/Linux-Security-one-year-later.../</guid>
      <description>This post (tries to) describe what happened in 2010 about GNU/Linux security. What this post is not is a long list of vulnerabilities, there are some people doing it way better that me.
The first part of this post is dedicated to new vulnerability classes where the second one focuses on the defensive side, analyzing improvements made to the Linux kernel. Before closing this post, some selected quotes will be presented, pointing the finger at some of the Linux failures.</description>
    </item>
    
    <item>
      <title>La sécurité sous Linux, un an plus tard...</title>
      <link>https://justanothergeek.chdir.org/2010/12/La-s%C3%A9curit%C3%A9-sous-Linux-un-an-plus-tard.../</link>
      <pubDate>Tue, 28 Dec 2010 15:43:00 +0000</pubDate>
      
      <guid>https://justanothergeek.chdir.org/2010/12/La-s%C3%A9curit%C3%A9-sous-Linux-un-an-plus-tard.../</guid>
      <description>Sorry english folks: this post is in french, but it will be translated soon, translated and updated post is available here.
Plus qu&amp;rsquo;une longue liste de vulnérabilités, ce post a pour objectif de décrire ce qu&amp;rsquo;il s&amp;rsquo;est passé en 2010 dans l&amp;rsquo;écosystème de la sécurité sous GNU/Linux.
La première partie est dédiée aux nouvelles classes de vulnérabilité. La deuxième partie se concentre sur la défense avec l&amp;rsquo;analyse des différentes améliorations tendant à améliorer la sécurité de nos systèmes.</description>
    </item>
    
    <item>
      <title>What is really the attack surface of the kernel running a SECCOMP process?</title>
      <link>https://justanothergeek.chdir.org/2010/08/What-is-really-the-attack-surface-of-the-kernel-running-a-SECCOMP-process/</link>
      <pubDate>Wed, 25 Aug 2010 14:09:00 +0000</pubDate>
      
      <guid>https://justanothergeek.chdir.org/2010/08/What-is-really-the-attack-surface-of-the-kernel-running-a-SECCOMP-process/</guid>
      <description>In a previous post, I said the attack surface of the kernel for processes running SECCOMP was really low. To confirm this assumption, each vulnerability affecting the 2.6 kernel was reviewed.
Only those triggerable from a SECCOMPed process were kept. On 440 vulnerabilities, 13 were qualified:
Impact Description Architecture Reference
HIGH infinite loop triggering signal handler i386 CVE-2004-0554 MEDIUM audit_syscall_entry bypass amd64 CVE-2009-0834 MEDIUM SECCOMP bypass amd64 CVE-2009-0835 MEDIUM Non-sign extension of syscall arguments s390 CVE-2009-0029 MEDIUM EFLAGS leak on context switch amd64/i386 CVE-2006-5755 MEDIUM Nested faults amd64 CVE-2005-1767 MEDIUM Not handling properly certain privileged instructions s390 CVE-2004-0887 LOW Fix register leak in 32 bits syscall audititing amd64 81766741f LOW 64-bit kernel register leak to 32-bit processes amd64 24e35800c LOW Register leak amd64 CVE-2009-2910 LOW DoS by using malformed LDT amd64 CVE-2008-3247 LOW DoS on floating point exceptions powerpc HTX CVE-2007-3107 LOW DoS on 32-bit compatibility mode amd64 CVE-2005-1765</description>
    </item>
    
    <item>
      <title>No more ASLR bypass on Linux 2.6.30</title>
      <link>https://justanothergeek.chdir.org/2010/02/No-more-ASLR-bypass-on-Linux-2.6.30/</link>
      <pubDate>Tue, 23 Feb 2010 12:26:00 +0000</pubDate>
      
      <guid>https://justanothergeek.chdir.org/2010/02/No-more-ASLR-bypass-on-Linux-2.6.30/</guid>
      <description>While trying to exploit a local setuid application, I had the unhappiness (as an attacker) to see that the security of the ASLR Linux kernel has increased, removing a whole method of exploitation. But let&amp;rsquo;s begin from the start:
The minimalist vulnerable example could be this vuln.c:
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; int main( int argc, char *argv[] ) { char buf[4]; printf(&amp;quot;%#p\n&amp;quot;, &amp;amp;buf); strcpy( buf, argv[1] ); return 0; }  Because of the Address Space Layout Randomization (ASLR), this bug is tough to exploit: if the binary is compiled with the right options and the kernel is configured to fully randomize the address space, it becomes impossible to guess where the buffer is, nor the location of the functions&amp;rsquo; libraries.</description>
    </item>
    
    <item>
      <title>How system calls work on recent Linux x86 glibc</title>
      <link>https://justanothergeek.chdir.org/2010/02/How-system-calls-work-on-recent-Linux-x86-glibc/</link>
      <pubDate>Sat, 20 Feb 2010 22:11:00 +0000</pubDate>
      
      <guid>https://justanothergeek.chdir.org/2010/02/How-system-calls-work-on-recent-Linux-x86-glibc/</guid>
      <description>This post explains how system calls are implemented on recent Linux system. It covers only the x86_32 platform, on a recent Linux kernel and GNU Libc (where recent means &amp;ldquo;released after 2005&amp;rdquo;).
Processor facility for making syscall On x86, userspace processes run in ring 3, while the kernel is in ring 0. Only the kernel can do the interface between the resources and the processes.
A resource can be an access to a hardware device, a kernel object or any kind of IPC.</description>
    </item>
    
  </channel>
</rss>